#!/usr/bin/env python3
"""Analyze the WBXML hex from logs"""

hex_str = "03016a000000454e033100015c4f5003456d61696c000152033100014b033200014e0331000156474d03313a333500014f00024f034677643a20d7a9d7a0d79420d798d795d791d79420d795d792d79ed7a820d797d7aad799d79ed79420d798d795d791d794202d20d791d799d7aa20d794d797d799d7a0d795d79a20d7b4d7a7d793d79dd7b40001500373687472756d6a40676d61696c2e636f6d00015103796f6e6174616e4073687472756d2e636f6d00015203323032352d31302d30315432313a35333a35352e3030305a00015303796f6e6174616e4073687472756d2e636f6d000154034677643a20d7a9d7a0d79420d798d795d791d79420d795d792d79ed7a820d797d7aad799d79ed79420d798d795d791d794202d20d791d799d7aa20d794d797d799d7a0d795d79a20d7b4d7a7d793d79dd7b40001550331000156033000015c0349504d2e4e6f746500015f033100010004484a033100014b0338313900010c49032d2d2d2d2d2d2d2d2d2d20466f72776172646564206d657373616765202d2d2d2d2d2d2d2d2dd79ed790d7aa3a20d790d795d7a4d79620d7a9d797d7a8202d20d79ed7a0d794d79c20266c743b6e6f7265706c7940736d6172747363686f6f6c2e636f2e696c2667743be280aa446174653a20d799d795d79d20d793d7b32c203120d791d790d795d7a7d7b3203230323520d7912d31363a3332e280ace280aa5375626a6563743a20d7a9d7a0d79420d798d795d791d79420d795d792d79ed7a820d797d7aad799d79ed79420d798d795d791d794202d20d791d799d7aa20d794d797d799d7a0d795d79a20d7b4d7a7d793d79dd7b4e280ace280aa546f3a20d7a9d798d7a8d795d79d20d799d794d795d7a0d7aad79f20266c743b73687472756d6a40676d61696c2e636f6d2667743be280acd794d795d7a8d799d79d20d799d7a7d7a8d799d79d0d0ad79ed7a9d7a4d797d7aa20d7a7d793d79d20d794d799d7a7d7a8d7940d0a0d0ad7a2d7a8d79120d799d795d79d20d794d79bd799d7a4d795d7a8d799d79d20d7a0d790d797d79c20d792d79ed7a820d797d7aad799d79ed79420d798d795d791d7942e0d0ad790d7a0d79520d791d791d799d7aa20d794d797d799d7a0d795d79a20d79ed7a9d7aad793d79cd799d79d20d79cd7a2d7a9d795d7aa20d79bd79c20d799d795d79d20d791d799d795d79ed79520d790d7aa20d794d79ed799d7a8d79120d7a2d791d795d7a820d794d7aad79cd79ed799d793d795d7aa20d795d794d7aad79cd79ed799d793d799d79d2ec2a00d0ad79bd79c20d790d799d7a920d7a6d795d795d7aa20d79ed797d795d799d799d79120d791d79ed790d795d7aa20d794d790d797d795d796d799d79d20d79cd79bd79c20d799d79cd79320d795d799d79cd793d79420d79cd794d7a0d797d79cd7aa20d7a2d7a8d79bd799d79d2c20d79cd79cd79ed799d793d79420d790d7aad792d7a8d799d7aa20d795d79cd790d7a7d79cd799d79d20d79ed799d798d791d7992ec2a00d0ad79bd791d79bd79c20d799d795d79d2c20d795d791d7a4d7a8d79820d791d799d795d79d20d796d7942c20d790d7a0d79520d79bd7a6d795d795d7aa20d792d79d20d791d795d797d7a0d799d79d000101000001010116010101"

data = bytes.fromhex(hex_str)

print("=== WBXML ANALYSIS ===\n")
print(f"Total length: {len(data)} bytes\n")

# Header
print("HEADER:")
print(f"  Version: 0x{data[0]:02x}")
print(f"  PublicID: 0x{data[1]:02x}")
print(f"  Charset: 0x{data[2]:02x}")
print(f"  StringTable: 0x{data[3]:02x}")
print()

# Look for codepage switches
print("CODEPAGE SWITCHES:")
i = 4
while i < len(data) - 1:
    if data[i] == 0x00:
        codepage = data[i+1]
        print(f"  Position {i}: SWITCH_PAGE to {codepage} ({hex(codepage)})")
        if codepage == 0:
            print("    → AirSync")
        elif codepage == 2:
            print("    → Email")
        elif codepage == 4:
            print("    → AirSyncBase (cp 4)")
        elif codepage == 17:
            print("    → AirSyncBase (cp 17)")
    i += 1

print()

# Look for Body tag
print("BODY TAG ANALYSIS:")
i = 4
current_cp = 0
while i < len(data) - 1:
    if data[i] == 0x00:
        current_cp = data[i+1]
    elif data[i] == 0x48:  # Body token
        print(f"  Position {i}: Found 0x48 (Body) in codepage {current_cp}")
    i += 1

print()
print("KEY QUESTION: Does the expert mean:")
print("  A) Use codepage 4 (0x04) - maybe older ActiveSync?")
print("  B) Use codepage 17 (0x11) - per Microsoft docs?")
print()
print("Let's check if iPhone expects codepage 4 or 17...")

