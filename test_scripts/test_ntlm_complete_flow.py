#!/usr/bin/env python3
"""
Test complete NTLM authentication flow to diagnose autoconfigure issues
"""

import requests
import base64
import struct
import urllib3
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

def test_ntlm_complete_flow():
    """Test complete NTLM flow including Type3 response"""
    
    session = requests.Session()
    base_url = "https://owa.shtrum.com/mapi/emsmdb"
    
    print("=== NTLM Complete Flow Test ===")
    
    # Step 1: Initial request (should get Type2 challenge)
    print("Step 1: Initial request")
    response1 = session.get(base_url, verify=False)
    print(f"Status: {response1.status_code}")
    print(f"WWW-Authenticate: {response1.headers.get('WWW-Authenticate', 'None')}")
    
    if response1.status_code != 401:
        print("❌ Expected 401, got different status")
        return False
    
    # Step 2: Send Type1 NTLM negotiate
    print("\nStep 2: Send NTLM Type1 negotiate")
    type1_token = "TlRMTVNTUAABAAAAB4IIAAAAAAAAAAAAAAAAAAAAAAA="
    headers = {
        "Authorization": f"NTLM {type1_token}",
        "Content-Type": "application/mapi-http"
    }
    
    response2 = session.post(base_url, headers=headers, data="", verify=False)
    print(f"Status: {response2.status_code}")
    print(f"WWW-Authenticate: {response2.headers.get('WWW-Authenticate', 'None')}")
    
    if response2.status_code != 401:
        print("❌ Expected 401, got different status")
        return False
    
    # Extract Type2 challenge
    auth_header = response2.headers.get('WWW-Authenticate', '')
    if not auth_header.startswith('NTLM '):
        print("❌ No NTLM challenge received")
        return False
    
    type2_token = auth_header.split(' ', 1)[1]
    print(f"Type2 token length: {len(type2_token)}")
    print(f"Type2 token preview: {type2_token[:60]}...")
    
    # Step 3: Simulate Type3 response (this is where the issue likely is)
    print("\nStep 3: Simulate NTLM Type3 authenticate")
    
    # For testing, we'll create a mock Type3 token
    # In real NTLM, this would be generated by the client with proper credentials
    try:
        # Decode Type2 to understand the challenge
        type2_raw = base64.b64decode(type2_token)
        print(f"Type2 raw length: {len(type2_raw)}")
        
        # Create a mock Type3 response
        # This is a simplified version - real Type3 would include proper authentication
        type3_raw = b"NTLMSSP\x00\x03\x00\x00\x00" + b"\x00" * 100  # Mock Type3
        type3_token = base64.b64encode(type3_raw).decode('ascii')
        
        headers3 = {
            "Authorization": f"NTLM {type3_token}",
            "Content-Type": "application/mapi-http"
        }
        
        response3 = session.post(base_url, headers=headers3, data="", verify=False)
        print(f"Status: {response3.status_code}")
        print(f"Response headers: {dict(response3.headers)}")
        
        if response3.status_code == 200:
            print("✅ Type3 authentication successful!")
            return True
        else:
            print(f"❌ Type3 authentication failed with status {response3.status_code}")
            return False
            
    except Exception as e:
        print(f"❌ Error in Type3 simulation: {e}")
        return False

if __name__ == "__main__":
    success = test_ntlm_complete_flow()
    if success:
        print("\n✅ NTLM Complete Flow Test Passed")
    else:
        print("\n❌ NTLM Complete Flow Test Failed")
